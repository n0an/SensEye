//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `secretsFile.txt`.
    static let secretsFileTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "secretsFile", pathExtension: "txt")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "secretsFile", withExtension: "txt")`
    static func secretsFileTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.secretsFileTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 37 images.
  struct image {
    /// Image `CloseButton`.
    static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CloseButton")
    /// Image `Close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Close")
    /// Image `Comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Comment")
    /// Image `LikeNo`.
    static let likeNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "LikeNo")
    /// Image `LikeYes`.
    static let likeYes = Rswift.ImageResource(bundle: R.hostingBundle, name: "LikeYes")
    /// Image `PhotoDisplayer-ArrowLeft`.
    static let photoDisplayerArrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhotoDisplayer-ArrowLeft")
    /// Image `PhotoDisplayer-ArrowRight`.
    static let photoDisplayerArrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhotoDisplayer-ArrowRight")
    /// Image `Userpic 40px`.
    static let userpic40px = Rswift.ImageResource(bundle: R.hostingBundle, name: "Userpic 40px")
    /// Image `about-icon-chat`.
    static let aboutIconChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-icon-chat")
    /// Image `about-icon-email`.
    static let aboutIconEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-icon-email")
    /// Image `about-icon-facebookColor`.
    static let aboutIconFacebookColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-icon-facebookColor")
    /// Image `about-icon-instagramColor`.
    static let aboutIconInstagramColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-icon-instagramColor")
    /// Image `about-icon-skypeColor`.
    static let aboutIconSkypeColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-icon-skypeColor")
    /// Image `about-icon-vkColor`.
    static let aboutIconVkColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-icon-vkColor")
    /// Image `dark_crop_1000`.
    static let dark_crop_1000 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark_crop_1000")
    /// Image `defaultProfileImage`.
    static let defaultProfileImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "defaultProfileImage")
    /// Image `email-1`.
    static let email1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "email-1")
    /// Image `facebook-1`.
    static let facebook1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-1")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `hideKeyboardButton`.
    static let hideKeyboardButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "hideKeyboardButton")
    /// Image `icon-back`.
    static let iconBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-back")
    /// Image `lock-1`.
    static let lock1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock-1")
    /// Image `me`.
    static let me = Rswift.ImageResource(bundle: R.hostingBundle, name: "me")
    /// Image `nametag`.
    static let nametag = Rswift.ImageResource(bundle: R.hostingBundle, name: "nametag")
    /// Image `postVC-VKLogout`.
    static let postVCVKLogout = Rswift.ImageResource(bundle: R.hostingBundle, name: "postVC-VKLogout")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `tabBarIcon-About-filled`.
    static let tabBarIconAboutFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-About-filled")
    /// Image `tabBarIcon-About`.
    static let tabBarIconAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-About")
    /// Image `tabBarIcon-Chat-filled`.
    static let tabBarIconChatFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-Chat-filled")
    /// Image `tabBarIcon-Chat`.
    static let tabBarIconChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-Chat")
    /// Image `tabBarIcon-Gallery-filled`.
    static let tabBarIconGalleryFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-Gallery-filled")
    /// Image `tabBarIcon-Gallery`.
    static let tabBarIconGallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-Gallery")
    /// Image `tabBarIcon-Home-filled`.
    static let tabBarIconHomeFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-Home-filled")
    /// Image `tabBarIcon-Home`.
    static let tabBarIconHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarIcon-Home")
    /// Image `wp-lens01`.
    static let wpLens01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wp-lens01")
    /// Image `wp-lens02`.
    static let wpLens02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wp-lens02")
    /// Image `wp-lens08`.
    static let wpLens08 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wp-lens08")
    
    /// `UIImage(named: "Close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CloseButton", bundle: ..., traitCollection: ...)`
    static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LikeNo", bundle: ..., traitCollection: ...)`
    static func likeNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LikeYes", bundle: ..., traitCollection: ...)`
    static func likeYes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeYes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PhotoDisplayer-ArrowLeft", bundle: ..., traitCollection: ...)`
    static func photoDisplayerArrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoDisplayerArrowLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PhotoDisplayer-ArrowRight", bundle: ..., traitCollection: ...)`
    static func photoDisplayerArrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoDisplayerArrowRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Userpic 40px", bundle: ..., traitCollection: ...)`
    static func userpic40px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userpic40px, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about-icon-chat", bundle: ..., traitCollection: ...)`
    static func aboutIconChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutIconChat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about-icon-email", bundle: ..., traitCollection: ...)`
    static func aboutIconEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutIconEmail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about-icon-facebookColor", bundle: ..., traitCollection: ...)`
    static func aboutIconFacebookColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutIconFacebookColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about-icon-instagramColor", bundle: ..., traitCollection: ...)`
    static func aboutIconInstagramColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutIconInstagramColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about-icon-skypeColor", bundle: ..., traitCollection: ...)`
    static func aboutIconSkypeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutIconSkypeColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about-icon-vkColor", bundle: ..., traitCollection: ...)`
    static func aboutIconVkColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutIconVkColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dark_crop_1000", bundle: ..., traitCollection: ...)`
    static func dark_crop_1000(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark_crop_1000, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "defaultProfileImage", bundle: ..., traitCollection: ...)`
    static func defaultProfileImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultProfileImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "email-1", bundle: ..., traitCollection: ...)`
    static func email1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook-1", bundle: ..., traitCollection: ...)`
    static func facebook1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hideKeyboardButton", bundle: ..., traitCollection: ...)`
    static func hideKeyboardButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hideKeyboardButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-back", bundle: ..., traitCollection: ...)`
    static func iconBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock-1", bundle: ..., traitCollection: ...)`
    static func lock1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me", bundle: ..., traitCollection: ...)`
    static func me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nametag", bundle: ..., traitCollection: ...)`
    static func nametag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nametag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "postVC-VKLogout", bundle: ..., traitCollection: ...)`
    static func postVCVKLogout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postVCVKLogout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-About", bundle: ..., traitCollection: ...)`
    static func tabBarIconAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-About-filled", bundle: ..., traitCollection: ...)`
    static func tabBarIconAboutFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconAboutFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-Chat", bundle: ..., traitCollection: ...)`
    static func tabBarIconChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconChat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-Chat-filled", bundle: ..., traitCollection: ...)`
    static func tabBarIconChatFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconChatFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-Gallery", bundle: ..., traitCollection: ...)`
    static func tabBarIconGallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconGallery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-Gallery-filled", bundle: ..., traitCollection: ...)`
    static func tabBarIconGalleryFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconGalleryFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-Home", bundle: ..., traitCollection: ...)`
    static func tabBarIconHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconHome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarIcon-Home-filled", bundle: ..., traitCollection: ...)`
    static func tabBarIconHomeFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarIconHomeFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wp-lens01", bundle: ..., traitCollection: ...)`
    static func wpLens01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wpLens01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wp-lens02", bundle: ..., traitCollection: ...)`
    static func wpLens02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wpLens02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wp-lens08", bundle: ..., traitCollection: ...)`
    static func wpLens08(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wpLens08, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `RefreshContents`.
    static let refreshContents = _R.nib._RefreshContents()
    
    /// `UINib(name: "RefreshContents", in: bundle)`
    static func refreshContents(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.refreshContents)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AboutCellInfo`.
    static let aboutCellInfo: Rswift.ReuseIdentifier<AboutCellInfo> = Rswift.ReuseIdentifier(identifier: "AboutCellInfo")
    /// Reuse identifier `AboutCellSocnet`.
    static let aboutCellSocnet: Rswift.ReuseIdentifier<AboutCellSocnet> = Rswift.ReuseIdentifier(identifier: "AboutCellSocnet")
    /// Reuse identifier `ChatCell`.
    static let chatCell: Rswift.ReuseIdentifier<ChatTableViewCell> = Rswift.ReuseIdentifier(identifier: "ChatCell")
    /// Reuse identifier `CommentCell`.
    static let commentCell: Rswift.ReuseIdentifier<CommentCell> = Rswift.ReuseIdentifier(identifier: "CommentCell")
    /// Reuse identifier `ConnectCell`.
    static let connectCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ConnectCell")
    /// Reuse identifier `FeedCell`.
    static let feedCell: Rswift.ReuseIdentifier<FeedCell> = Rswift.ReuseIdentifier(identifier: "FeedCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `FeedViewController`, and contains static references to 2 segues.
    struct feedViewController {
      /// Segue identifier `ShowCommentComposer`.
      static let showCommentComposer: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FeedViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowCommentComposer")
      /// Segue identifier `showPost`.
      static let showPost: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FeedViewController, PostViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPost")
      
      /// Optionally returns a typed version of segue `ShowCommentComposer`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCommentComposer(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FeedViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.feedViewController.showCommentComposer, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showPost`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPost(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FeedViewController, PostViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.feedViewController.showPost, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LandscapeViewController`, and contains static references to 1 segues.
    struct landscapeViewController {
      /// Segue identifier `showPhoto`.
      static let showPhoto: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LandscapeViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showPhoto")
      
      /// Optionally returns a typed version of segue `showPhoto`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPhoto(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LandscapeViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.landscapeViewController.showPhoto, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 2 segues.
    struct loginViewController {
      /// Segue identifier `showChatViewController`.
      static let showChatViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, ChatViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showChatViewController")
      /// Segue identifier `showRecentChatsViewController`.
      static let showRecentChatsViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, RecentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRecentChatsViewController")
      
      /// Optionally returns a typed version of segue `showChatViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showChatViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, ChatViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.showChatViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRecentChatsViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRecentChatsViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, RecentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.showRecentChatsViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PostViewController`, and contains static references to 1 segues.
    struct postViewController {
      /// Segue identifier `ShowCommentComposer`.
      static let showCommentComposer: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PostViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowCommentComposer")
      
      /// Optionally returns a typed version of segue `ShowCommentComposer`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCommentComposer(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PostViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.postViewController.showCommentComposer, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RecentViewController`, and contains static references to 1 segues.
    struct recentViewController {
      /// Segue identifier `showChatViewController`.
      static let showChatViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RecentViewController, ChatViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showChatViewController")
      
      /// Optionally returns a typed version of segue `showChatViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showChatViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RecentViewController, ChatViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.recentViewController.showChatViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `about`.
    static let about = _R.storyboard.about()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "about", bundle: ...)`
    static func about(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.about)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.about` struct is generated, and contains static references to 3 localization keys.
    struct about {
      /// ru translation: Здравствуйте! Меня зовут Елена.  Я фотограф из Москвы, по договоренности выезжаю и в другие города. Если Вы ищете фотографа, с которым будет легко и интересно работать — Вам сюда 🙂              В свадебной фотосессии я стараюсь добиться искренности в кадре. Отвлечь молодоженов от суеты, дать возможность насладиться происходящим здесь и сейчас, совместным творчеством, раскрыться. Чтобы эти моменты остались и красивым кадром в фотоальбоме, и живым воспоминанием!          — помогу с позированием         — с составлением плана прогулки         — с выбором места свадебной прогулки         — дам контакты хорошего свадебного ведущего и визажистов         — при заказе свадебной фотосессии- съемка лав стори в подарок!         
      /// 
      /// Locales: ru
      static let lsJZzXQRText = Rswift.StringResource(key: "LsJ-Zz-xQR.text", tableName: "about", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обо мне
      /// 
      /// Locales: ru
      static let ckMGnHP4Title = Rswift.StringResource(key: "ckM-gn-hP4.title", tableName: "about", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обо мне
      /// 
      /// Locales: ru
      static let zxHGWP6PTitle = Rswift.StringResource(key: "zxH-gW-P6P.title", tableName: "about", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Здравствуйте! Меня зовут Елена.  Я фотограф из Москвы, по договоренности выезжаю и в другие города. Если Вы ищете фотографа, с которым будет легко и интересно работать — Вам сюда 🙂              В свадебной фотосессии я стараюсь добиться искренности в кадре. Отвлечь молодоженов от суеты, дать возможность насладиться происходящим здесь и сейчас, совместным творчеством, раскрыться. Чтобы эти моменты остались и красивым кадром в фотоальбоме, и живым воспоминанием!          — помогу с позированием         — с составлением плана прогулки         — с выбором места свадебной прогулки         — дам контакты хорошего свадебного ведущего и визажистов         — при заказе свадебной фотосессии- съемка лав стори в подарок!         
      /// 
      /// Locales: ru
      static func lsJZzXQRText(_: Void = ()) -> String {
        return NSLocalizedString("LsJ-Zz-xQR.text", tableName: "about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обо мне
      /// 
      /// Locales: ru
      static func ckMGnHP4Title(_: Void = ()) -> String {
        return NSLocalizedString("ckM-gn-hP4.title", tableName: "about", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обо мне
      /// 
      /// Locales: ru
      static func zxHGWP6PTitle(_: Void = ()) -> String {
        return NSLocalizedString("zxH-gW-P6P.title", tableName: "about", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.infoPlist` struct is generated, and contains static references to 3 localization keys.
    struct infoPlist {
      /// Base translation: Need access to camera to create profile image
      /// 
      /// Locales: ru, Base, ru
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ru", "Base", "ru"], comment: nil)
      /// Base translation: Need access to contacts, to set photo to selected contact
      /// 
      /// Locales: ru, Base, ru
      static let nsContactsUsageDescription = Rswift.StringResource(key: "NSContactsUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ru", "Base", "ru"], comment: nil)
      /// Base translation: Need access to photo library to provide saving and selecting photos from photo library
      /// 
      /// Locales: ru, Base, ru
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ru", "Base", "ru"], comment: nil)
      
      /// Base translation: Need access to camera to create profile image
      /// 
      /// Locales: ru, Base, ru
      static func nsCameraUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, value: "Need access to camera to create profile image", comment: "")
      }
      
      /// Base translation: Need access to contacts, to set photo to selected contact
      /// 
      /// Locales: ru, Base, ru
      static func nsContactsUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSContactsUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, value: "Need access to contacts, to set photo to selected contact", comment: "")
      }
      
      /// Base translation: Need access to photo library to provide saving and selecting photos from photo library
      /// 
      /// Locales: ru, Base, ru
      static func nsPhotoLibraryUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, value: "Need access to photo library to provide saving and selecting photos from photo library", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 51 localization keys.
    struct localizable {
      /// ru translation: Facebook недоступен
      /// 
      /// Locales: ru
      static let facebookUnavailable = Rswift.StringResource(key: "Facebook Unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Twitter недоступен
      /// 
      /// Locales: ru
      static let twitterUnavailable = Rswift.StringResource(key: "Twitter Unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Альбом
      /// 
      /// Locales: ru
      static let album = Rswift.StringResource(key: "Album", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Альбомы
      /// 
      /// Locales: ru
      static let albums = Rswift.StringResource(key: "Albums", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ВКонтакте
      /// 
      /// Locales: ru
      static let vK = Rswift.StringResource(key: "VK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите email и пароль
      /// 
      /// Locales: ru
      static let enterYourEmailAndPassword = Rswift.StringResource(key: "Enter your email and password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановление пароля произведено
      /// 
      /// Locales: ru
      static let passwordResetFollowUp = Rswift.StringResource(key: "Password Reset Follow-up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Встроенный чат
      /// 
      /// Locales: ru
      static let inAppChat = Rswift.StringResource(key: "InApp Chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Входим в чат
      /// 
      /// Locales: ru
      static let enteringChat = Rswift.StringResource(key: "Entering chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вчера
      /// 
      /// Locales: ru
      static let yesterday = Rswift.StringResource(key: "Yesterday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы не вошли в учетную запись Facebook. Пожалуйста, войдите в свою учетную запись в Настройки > Facebook
      /// 
      /// Locales: ru
      static let youHavenTRegisteredYourFacebookAccountPleaseGoToSettingsFacebookToCreateOne = Rswift.StringResource(key: "You haven't registered your Facebook account. Please go to Settings > Facebook to create one.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы не вошли в учетную запись Twitter. Пожалуйста, войдите в свою учетную запись в Настройки > Twitter
      /// 
      /// Locales: ru
      static let youHavenTRegisteredYourTwitterAccountPleaseGoToSettingsTwitterToCreateOne = Rswift.StringResource(key: "You haven't registered your Twitter account. Please go to Settings > Twitter to create one.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выйти
      /// 
      /// Locales: ru
      static let logOut = Rswift.StringResource(key: "Log Out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Да
      /// 
      /// Locales: ru
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Для доступа к функционалу лайков и комментариев, необходимо авторизоваться в Вконтакте. Действие нужно выполнить один раз
      /// 
      /// Locales: ru
      static let youHaveToLoginToVKToGetAccessToLikesAndCommentsFeaturesYouHaveToLoginJustOnce = Rswift.StringResource(key: "You have to login to VK to get access to likes and comments features. You have to login just once", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Другое
      /// 
      /// Locales: ru
      static let other = Rswift.StringResource(key: "Other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Елена
      /// 
      /// Locales: ru
      static let elenaSenseye = Rswift.StringResource(key: "Elena Senseye", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Заходим
      /// 
      /// Locales: ru
      static let loggingIn = Rswift.StringResource(key: "Logging In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Здравствуйте
      /// 
      /// Locales: ru
      static let hello = Rswift.StringResource(key: "Hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Здравствуйте, я могу Вам чем-то помочь?
      /// 
      /// Locales: ru
      static let helloHowCanIHelpYou = Rswift.StringResource(key: "Hello. How can I help you?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Контакты
      /// 
      /// Locales: ru
      static let contacts = Rswift.StringResource(key: "Contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Логин в ВК
      /// 
      /// Locales: ru
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: На ваш email был отправлен новый пароль. Пожалуйста, проверьте электронную почту и проследуйте инструкциям в полученном письме
      /// 
      /// Locales: ru
      static let weHaveJustSentYouAPasswordResetEmailPleaseCheckYourInboxAndFollowTheInstructionsToResetYourPassword = Rswift.StringResource(key: "We have just sent you a password reset email. Please check your inbox and follow the instructions to reset your password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Напишите мне письмо
      /// 
      /// Locales: ru
      static let emailToMe = Rswift.StringResource(key: "Email to me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не удалось отправить сообщение
      /// 
      /// Locales: ru
      static let failedToSendTheMessage = Rswift.StringResource(key: "Failed to send the message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Необходима авторизация
      /// 
      /// Locales: ru
      static let authorizationToVKRequired = Rswift.StringResource(key: "Authorization to VK required", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Нет
      /// 
      /// Locales: ru
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Новый комментарий
      /// 
      /// Locales: ru
      static let newComment = Rswift.StringResource(key: "New comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обо мне
      /// 
      /// Locales: ru
      static let aboutMe = Rswift.StringResource(key: "About me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отмена
      /// 
      /// Locales: ru
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправка сообщения отменена
      /// 
      /// Locales: ru
      static let smsCancelled = Rswift.StringResource(key: "SMS cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка
      /// 
      /// Locales: ru
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка
      /// 
      /// Locales: ru
      static let failure = Rswift.StringResource(key: "Failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка восстановления пароля
      /// 
      /// Locales: ru
      static let passwordResetError = Rswift.StringResource(key: "Password Reset Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка входа
      /// 
      /// Locales: ru
      static let inputError = Rswift.StringResource(key: "Input Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка отправки сообщения
      /// 
      /// Locales: ru
      static let smsFailed = Rswift.StringResource(key: "SMS failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка регистрации
      /// 
      /// Locales: ru
      static let signUpError = Rswift.StringResource(key: "Sign Up Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Поделиться с помощью
      /// 
      /// Locales: ru
      static let shareUsing = Rswift.StringResource(key: "Share using", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пожалуйста, введите ваш email адрес для восстановления пароля
      /// 
      /// Locales: ru
      static let pleaseProvideYourEmailAddressForPasswordReset = Rswift.StringResource(key: "Please provide your email address for password reset.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пожалуйста, убедитесь, что вы ввели ваши имя пользователя, email адрес и пароль
      /// 
      /// Locales: ru
      static let pleaseMakeSureYouProvidedYourNameEmailAddressAndPasswordToCompleteTheRegistration = Rswift.StringResource(key: "Please make sure you provided your name, email address and password to complete the registration.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Потяните вниз, чтобы закрыть
      /// 
      /// Locales: ru
      static let pullDownToClose = Rswift.StringResource(key: "Pull down to close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сделать снимок
      /// 
      /// Locales: ru
      static let takePhoto = Rswift.StringResource(key: "Take Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сегодня
      /// 
      /// Locales: ru
      static let today = Rswift.StringResource(key: "Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сервис сообщений недоступен
      /// 
      /// Locales: ru
      static let smsUnavailable = Rswift.StringResource(key: "SMS Unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сервис сообщений недоступен
      /// 
      /// Locales: ru
      static let yourDeviceIsNotCapableOfSendingSMS = Rswift.StringResource(key: "Your device is not capable of sending SMS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Создаем аккаунт
      /// 
      /// Locales: ru
      static let registeringNewAccount = Rswift.StringResource(key: "Registering new account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Социальные сети
      /// 
      /// Locales: ru
      static let socialNetworks = Rswift.StringResource(key: "Social Networks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Фотограф - Elena Senseye
      /// 
      /// Locales: ru
      static let photoByElenaSenseye = Rswift.StringResource(key: "Photo by Elena Senseye", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Фотограф Elena Senseye - vk.com/elena_senseye
      /// 
      /// Locales: ru
      static let photoByElenaSenseyeVkComElena_senseye = Rswift.StringResource(key: "Photo by Elena Senseye - vk.com/elena_senseye", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Фотографии
      /// 
      /// Locales: ru
      static let photoLibrary = Rswift.StringResource(key: "Photo Library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Facebook недоступен
      /// 
      /// Locales: ru
      static func facebookUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("Facebook Unavailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Twitter недоступен
      /// 
      /// Locales: ru
      static func twitterUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("Twitter Unavailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Альбом
      /// 
      /// Locales: ru
      static func album(_: Void = ()) -> String {
        return NSLocalizedString("Album", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Альбомы
      /// 
      /// Locales: ru
      static func albums(_: Void = ()) -> String {
        return NSLocalizedString("Albums", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ВКонтакте
      /// 
      /// Locales: ru
      static func vK(_: Void = ()) -> String {
        return NSLocalizedString("VK", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите email и пароль
      /// 
      /// Locales: ru
      static func enterYourEmailAndPassword(_: Void = ()) -> String {
        return NSLocalizedString("Enter your email and password", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static func forgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("Forgot Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановление пароля произведено
      /// 
      /// Locales: ru
      static func passwordResetFollowUp(_: Void = ()) -> String {
        return NSLocalizedString("Password Reset Follow-up", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Встроенный чат
      /// 
      /// Locales: ru
      static func inAppChat(_: Void = ()) -> String {
        return NSLocalizedString("InApp Chat", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Входим в чат
      /// 
      /// Locales: ru
      static func enteringChat(_: Void = ()) -> String {
        return NSLocalizedString("Entering chat", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вчера
      /// 
      /// Locales: ru
      static func yesterday(_: Void = ()) -> String {
        return NSLocalizedString("Yesterday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы не вошли в учетную запись Facebook. Пожалуйста, войдите в свою учетную запись в Настройки > Facebook
      /// 
      /// Locales: ru
      static func youHavenTRegisteredYourFacebookAccountPleaseGoToSettingsFacebookToCreateOne(_: Void = ()) -> String {
        return NSLocalizedString("You haven't registered your Facebook account. Please go to Settings > Facebook to create one.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы не вошли в учетную запись Twitter. Пожалуйста, войдите в свою учетную запись в Настройки > Twitter
      /// 
      /// Locales: ru
      static func youHavenTRegisteredYourTwitterAccountPleaseGoToSettingsTwitterToCreateOne(_: Void = ()) -> String {
        return NSLocalizedString("You haven't registered your Twitter account. Please go to Settings > Twitter to create one.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выйти
      /// 
      /// Locales: ru
      static func logOut(_: Void = ()) -> String {
        return NSLocalizedString("Log Out", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Да
      /// 
      /// Locales: ru
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("Yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Для доступа к функционалу лайков и комментариев, необходимо авторизоваться в Вконтакте. Действие нужно выполнить один раз
      /// 
      /// Locales: ru
      static func youHaveToLoginToVKToGetAccessToLikesAndCommentsFeaturesYouHaveToLoginJustOnce(_: Void = ()) -> String {
        return NSLocalizedString("You have to login to VK to get access to likes and comments features. You have to login just once", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Другое
      /// 
      /// Locales: ru
      static func other(_: Void = ()) -> String {
        return NSLocalizedString("Other", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Елена
      /// 
      /// Locales: ru
      static func elenaSenseye(_: Void = ()) -> String {
        return NSLocalizedString("Elena Senseye", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Заходим
      /// 
      /// Locales: ru
      static func loggingIn(_: Void = ()) -> String {
        return NSLocalizedString("Logging In", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Здравствуйте
      /// 
      /// Locales: ru
      static func hello(_: Void = ()) -> String {
        return NSLocalizedString("Hello", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Здравствуйте, я могу Вам чем-то помочь?
      /// 
      /// Locales: ru
      static func helloHowCanIHelpYou(_: Void = ()) -> String {
        return NSLocalizedString("Hello. How can I help you?", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Контакты
      /// 
      /// Locales: ru
      static func contacts(_: Void = ()) -> String {
        return NSLocalizedString("Contacts", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Логин в ВК
      /// 
      /// Locales: ru
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: На ваш email был отправлен новый пароль. Пожалуйста, проверьте электронную почту и проследуйте инструкциям в полученном письме
      /// 
      /// Locales: ru
      static func weHaveJustSentYouAPasswordResetEmailPleaseCheckYourInboxAndFollowTheInstructionsToResetYourPassword(_: Void = ()) -> String {
        return NSLocalizedString("We have just sent you a password reset email. Please check your inbox and follow the instructions to reset your password.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Напишите мне письмо
      /// 
      /// Locales: ru
      static func emailToMe(_: Void = ()) -> String {
        return NSLocalizedString("Email to me", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Не удалось отправить сообщение
      /// 
      /// Locales: ru
      static func failedToSendTheMessage(_: Void = ()) -> String {
        return NSLocalizedString("Failed to send the message", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Необходима авторизация
      /// 
      /// Locales: ru
      static func authorizationToVKRequired(_: Void = ()) -> String {
        return NSLocalizedString("Authorization to VK required", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Нет
      /// 
      /// Locales: ru
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("No", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Новый комментарий
      /// 
      /// Locales: ru
      static func newComment(_: Void = ()) -> String {
        return NSLocalizedString("New comment", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обо мне
      /// 
      /// Locales: ru
      static func aboutMe(_: Void = ()) -> String {
        return NSLocalizedString("About me", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отмена
      /// 
      /// Locales: ru
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отправка сообщения отменена
      /// 
      /// Locales: ru
      static func smsCancelled(_: Void = ()) -> String {
        return NSLocalizedString("SMS cancelled", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка
      /// 
      /// Locales: ru
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка
      /// 
      /// Locales: ru
      static func failure(_: Void = ()) -> String {
        return NSLocalizedString("Failure", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка восстановления пароля
      /// 
      /// Locales: ru
      static func passwordResetError(_: Void = ()) -> String {
        return NSLocalizedString("Password Reset Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка входа
      /// 
      /// Locales: ru
      static func inputError(_: Void = ()) -> String {
        return NSLocalizedString("Input Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка отправки сообщения
      /// 
      /// Locales: ru
      static func smsFailed(_: Void = ()) -> String {
        return NSLocalizedString("SMS failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка регистрации
      /// 
      /// Locales: ru
      static func signUpError(_: Void = ()) -> String {
        return NSLocalizedString("Sign Up Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Поделиться с помощью
      /// 
      /// Locales: ru
      static func shareUsing(_: Void = ()) -> String {
        return NSLocalizedString("Share using", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пожалуйста, введите ваш email адрес для восстановления пароля
      /// 
      /// Locales: ru
      static func pleaseProvideYourEmailAddressForPasswordReset(_: Void = ()) -> String {
        return NSLocalizedString("Please provide your email address for password reset.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пожалуйста, убедитесь, что вы ввели ваши имя пользователя, email адрес и пароль
      /// 
      /// Locales: ru
      static func pleaseMakeSureYouProvidedYourNameEmailAddressAndPasswordToCompleteTheRegistration(_: Void = ()) -> String {
        return NSLocalizedString("Please make sure you provided your name, email address and password to complete the registration.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Потяните вниз, чтобы закрыть
      /// 
      /// Locales: ru
      static func pullDownToClose(_: Void = ()) -> String {
        return NSLocalizedString("Pull down to close", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сделать снимок
      /// 
      /// Locales: ru
      static func takePhoto(_: Void = ()) -> String {
        return NSLocalizedString("Take Photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сегодня
      /// 
      /// Locales: ru
      static func today(_: Void = ()) -> String {
        return NSLocalizedString("Today", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сервис сообщений недоступен
      /// 
      /// Locales: ru
      static func smsUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("SMS Unavailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сервис сообщений недоступен
      /// 
      /// Locales: ru
      static func yourDeviceIsNotCapableOfSendingSMS(_: Void = ()) -> String {
        return NSLocalizedString("Your device is not capable of sending SMS", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Создаем аккаунт
      /// 
      /// Locales: ru
      static func registeringNewAccount(_: Void = ()) -> String {
        return NSLocalizedString("Registering new account", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Социальные сети
      /// 
      /// Locales: ru
      static func socialNetworks(_: Void = ()) -> String {
        return NSLocalizedString("Social Networks", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Фотограф - Elena Senseye
      /// 
      /// Locales: ru
      static func photoByElenaSenseye(_: Void = ()) -> String {
        return NSLocalizedString("Photo by Elena Senseye", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Фотограф Elena Senseye - vk.com/elena_senseye
      /// 
      /// Locales: ru
      static func photoByElenaSenseyeVkComElena_senseye(_: Void = ()) -> String {
        return NSLocalizedString("Photo by Elena Senseye - vk.com/elena_senseye", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Фотографии
      /// 
      /// Locales: ru
      static func photoLibrary(_: Void = ()) -> String {
        return NSLocalizedString("Photo Library", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 24 localization keys.
    struct main {
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static let bo5LEGRKNormalTitle = Rswift.StringResource(key: "Bo5-LE-gRK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static let fiapykwTitle = Rswift.StringResource(key: "7FI-AP-yKW.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static let p4QJZLjVTitle = Rswift.StringResource(key: "p4Q-JZ-ljV.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static let yMl9rRN6NormalTitle = Rswift.StringResource(key: "YMl-9r-RN6.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановить пароль?
      /// 
      /// Locales: ru
      static let qHqIX28ONormalTitle = Rswift.StringResource(key: "QHq-iX-28O.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выберите Альбом
      /// 
      /// Locales: ru
      static let id2vP6lText = Rswift.StringResource(key: "4Id-2v-p6l.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выбрать фото
      /// 
      /// Locales: ru
      static let p0aVyXiyNormalTitle = Rswift.StringResource(key: "P0a-vy-Xiy.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Галерея
      /// 
      /// Locales: ru
      static let mIVuJSdTitle = Rswift.StringResource(key: "8mI-vu-jSd.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static let b0e1zKq7Text = Rswift.StringResource(key: "B0e-1z-kq7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static let ir3KMXcTText = Rswift.StringResource(key: "Ir3-kM-xcT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static let kpbD4VS1Placeholder = Rswift.StringResource(key: "kpb-D4-vS1.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static let ndZEw1IwText = Rswift.StringResource(key: "NdZ-Ew-1Iw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static let pCBBYHdhText = Rswift.StringResource(key: "pCB-bY-Hdh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Новости
      /// 
      /// Locales: ru
      static let guo4UTIHTitle = Rswift.StringResource(key: "guo-4U-tIH.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправить
      /// 
      /// Locales: ru
      static let qaKGhNilTitle = Rswift.StringResource(key: "qaK-gh-nil.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static let mNFNoYKEPlaceholder = Rswift.StringResource(key: "mNF-no-yKE.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static let qPqSoNCnPlaceholder = Rswift.StringResource(key: "QPq-so-NCn.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Последнее сообщение
      /// 
      /// Locales: ru
      static let w0JN7IIsText = Rswift.StringResource(key: "w0J-n7-IIs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Потяните вниз, чтобы закрыть
      /// 
      /// Locales: ru
      static let nseofHyuText = Rswift.StringResource(key: "NSE-OF-Hyu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static let a6CAmDTMTitle = Rswift.StringResource(key: "a6C-am-DTM.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static let nRmReAAeNormalTitle = Rswift.StringResource(key: "NRm-re-aAe.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Создать Аккаунт
      /// 
      /// Locales: ru
      static let pPeWIKG6NormalTitle = Rswift.StringResource(key: "pPe-wI-kG6.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Чат
      /// 
      /// Locales: ru
      static let e7aTaSOHTitle = Rswift.StringResource(key: "e7a-ta-sOH.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Чаты
      /// 
      /// Locales: ru
      static let qBeX0M56Title = Rswift.StringResource(key: "qBe-x0-M56.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static func bo5LEGRKNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Bo5-LE-gRK.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static func fiapykwTitle(_: Void = ()) -> String {
        return NSLocalizedString("7FI-AP-yKW.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static func p4QJZLjVTitle(_: Void = ()) -> String {
        return NSLocalizedString("p4Q-JZ-ljV.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static func yMl9rRN6NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("YMl-9r-RN6.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановить пароль?
      /// 
      /// Locales: ru
      static func qHqIX28ONormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("QHq-iX-28O.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выберите Альбом
      /// 
      /// Locales: ru
      static func id2vP6lText(_: Void = ()) -> String {
        return NSLocalizedString("4Id-2v-p6l.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выбрать фото
      /// 
      /// Locales: ru
      static func p0aVyXiyNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("P0a-vy-Xiy.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Галерея
      /// 
      /// Locales: ru
      static func mIVuJSdTitle(_: Void = ()) -> String {
        return NSLocalizedString("8mI-vu-jSd.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static func b0e1zKq7Text(_: Void = ()) -> String {
        return NSLocalizedString("B0e-1z-kq7.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static func ir3KMXcTText(_: Void = ()) -> String {
        return NSLocalizedString("Ir3-kM-xcT.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static func kpbD4VS1Placeholder(_: Void = ()) -> String {
        return NSLocalizedString("kpb-D4-vS1.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static func ndZEw1IwText(_: Void = ()) -> String {
        return NSLocalizedString("NdZ-Ew-1Iw.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Имя пользователя
      /// 
      /// Locales: ru
      static func pCBBYHdhText(_: Void = ()) -> String {
        return NSLocalizedString("pCB-bY-Hdh.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Новости
      /// 
      /// Locales: ru
      static func guo4UTIHTitle(_: Void = ()) -> String {
        return NSLocalizedString("guo-4U-tIH.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отправить
      /// 
      /// Locales: ru
      static func qaKGhNilTitle(_: Void = ()) -> String {
        return NSLocalizedString("qaK-gh-nil.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static func mNFNoYKEPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("mNF-no-yKE.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static func qPqSoNCnPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("QPq-so-NCn.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Последнее сообщение
      /// 
      /// Locales: ru
      static func w0JN7IIsText(_: Void = ()) -> String {
        return NSLocalizedString("w0J-n7-IIs.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Потяните вниз, чтобы закрыть
      /// 
      /// Locales: ru
      static func nseofHyuText(_: Void = ()) -> String {
        return NSLocalizedString("NSE-OF-Hyu.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static func a6CAmDTMTitle(_: Void = ()) -> String {
        return NSLocalizedString("a6C-am-DTM.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static func nRmReAAeNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("NRm-re-aAe.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Создать Аккаунт
      /// 
      /// Locales: ru
      static func pPeWIKG6NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("pPe-wI-kG6.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Чат
      /// 
      /// Locales: ru
      static func e7aTaSOHTitle(_: Void = ()) -> String {
        return NSLocalizedString("e7a-ta-sOH.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Чаты
      /// 
      /// Locales: ru
      static func qBeX0M56Title(_: Void = ()) -> String {
        return NSLocalizedString("qBe-x0-M56.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _RefreshContents.validate()
    }
    
    struct _RefreshContents: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RefreshContents"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "dark_crop_1000", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dark_crop_1000' is used in nib 'RefreshContents', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try about.validate()
      try main.validate()
      try launchScreen.validate()
    }
    
    struct about: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "about"
      
      static func validate() throws {
        if UIKit.UIImage(named: "tabBarIcon-About") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-About' is used in storyboard 'about', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-facebook") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-facebook' is used in storyboard 'about', but couldn't be loaded.") }
        if UIKit.UIImage(named: "me") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'me' is used in storyboard 'about', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-About-filled") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-About-filled' is used in storyboard 'about', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "tabBarIcon-About") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-About' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Gallery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Gallery' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Chat") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Chat' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dark_crop_1000") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dark_crop_1000' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Home' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let chatVC = StoryboardViewControllerResource<ChatViewController>(identifier: "ChatVC")
      let landscapeViewController1 = StoryboardViewControllerResource<LandscapeViewController>(identifier: "LandscapeViewController1")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let mainTabBarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "mainTabBarController")
      let name = "Main"
      let photoNavViewController1 = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "PhotoNavViewController1")
      let photoViewController1 = StoryboardViewControllerResource<PhotoViewController>(identifier: "PhotoViewController1")
      
      func chatVC(_: Void = ()) -> ChatViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }
      
      func landscapeViewController1(_: Void = ()) -> LandscapeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landscapeViewController1)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func mainTabBarController(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }
      
      func photoNavViewController1(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoNavViewController1)
      }
      
      func photoViewController1(_: Void = ()) -> PhotoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoViewController1)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tabBarIcon-Chat") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Chat' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PhotoDisplayer-ArrowLeft") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PhotoDisplayer-ArrowLeft' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dark_crop_1000") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dark_crop_1000' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LikeNo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LikeNo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "nametag") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'nametag' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Gallery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Gallery' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Gallery-filled") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Gallery-filled' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wp-lens02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wp-lens02' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wp-lens01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wp-lens01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Userpic 40px") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Userpic 40px' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultProfileImage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultProfileImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Home-filled") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Home-filled' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hideKeyboardButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hideKeyboardButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "postVC-VKLogout") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'postVC-VKLogout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wp-lens08") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wp-lens08' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBarIcon-Chat-filled") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBarIcon-Chat-filled' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PhotoDisplayer-ArrowRight") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PhotoDisplayer-ArrowRight' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.main().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Main' as 'ChatViewController'.") }
        if _R.storyboard.main().landscapeViewController1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landscapeViewController1' could not be loaded from storyboard 'Main' as 'LandscapeViewController'.") }
        if _R.storyboard.main().photoNavViewController1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoNavViewController1' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().photoViewController1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoViewController1' could not be loaded from storyboard 'Main' as 'PhotoViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
